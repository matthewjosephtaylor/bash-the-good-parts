#!/bin/bash

# Pipes are more powerful than I realized
# http://unix.stackexchange.com/a/18904
# Pipe buffer size varies. 4k seems most safe assumption but most likely 64k.
# http://unix.stackexchange.com/a/11954

# echo
# { { echo "pipeline one"; echo >&2 "pipeline two"; echo >&3 "pipeline three" } 2>&3 | sed >&2 's/$/1/'; } 3>&1 1>&2 | sed 's/$/2/'

function out () {
	printf >&2 "pipeline two\np2 ln2\n"; printf "pipeline one\np1 ln2\n";
}

function exit_pipeline_on_error () {
	(

	2> >(
		# exec 3>&2 2>&1 1>&3
		local error_test=$(sed s/^/e:/)
		echo "error test: '${error_test}'"
		if [[ "${eror_test}" = "gotcha" ]]; then
			echo "got error"
			exit 1
		fi
	)
	)
}
# out
out | exit_pipeline_on_error

# } 2>&3 | sed >&2 's/$/1/'; } 3>&1 1>&2 | sed 's/$/2/'


# File descriptors are inhereted from parent process...interesting.
# http://mywiki.wooledge.org/FileDescriptor

# It would be neat to be able to caputre BOTH stdout and stderr to separate variables
# without using a temporary file.
# Unfortunately this isn't possible without a lot of tricky fragile code
# http://stackoverflow.com/questions/13806626/capture-both-stdout-and-stderr-in-bash
# ksh seems to have some facilities for doing this and the answer appears
# therefore to 'use a better shell'.
# However, using temp files isn't all that bad.  Afterall what is a file but
# a blob of data associated with a name? (same as a variable)
# So the real problem/answer is namespacing and garbage collection
# http://stackoverflow.com/a/687052/5306554

# MYTMPDIR=`mktemp -d`
# trap "rm -rf $MYTMPDIR" EXIT
